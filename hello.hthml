<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Dare to Ask</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <style>
      :root {
        color-scheme: light dark;
      }

      body {
        font-family: "Inter", "Segoe UI", system-ui, -apple-system, sans-serif;
        background: var(--bs-body-bg);
      }

      header.hero {
        background: linear-gradient(135deg, #0b1f44, #1b3b82);
      }

      .card-elevated {
        border: 1px solid rgba(15, 23, 42, 0.08);
        border-radius: 1.25rem;
        box-shadow: 0 1.5rem 3.5rem rgba(15, 23, 42, 0.12);
      }

      .badge-soft-primary {
        background-color: rgba(56, 86, 213, 0.12);
        color: #1b3b82;
      }

      .question-list {
        max-height: 70vh;
        overflow-y: auto;
      }

      .question-item {
        background-color: var(--bs-body-bg);
        border: 1px solid rgba(15, 23, 42, 0.08);
        border-radius: 1rem;
      }

      .question-item .btn-voted {
        background-color: #3856d5;
        color: #fff;
      }

      @media (max-width: 992px) {
        .question-list {
          max-height: none;
        }
      }
    </style>
  </head>
  <body class="bg-body-tertiary text-body">
    <header class="hero py-5 text-white">
      <div class="container">
        <div class="row justify-content-center">
          <div class="col-lg-8 text-center d-flex flex-column gap-3">
            <span class="badge rounded-pill badge-soft-primary align-self-center px-3 py-2 fw-semibold text-uppercase">Ask bravely</span>
            <h1 class="display-4 fw-bold mb-0">Dare to Ask</h1>
            <p class="lead mb-0">
              A trusted space for curious minds. Drop an anonymous question for our
              subject-matter experts, discover what others are wondering, and help us
              prioritise the next answers with an upvote.
            </p>
          </div>
        </div>
      </div>
    </header>

    <main class="py-5">
      <div class="container">
        <div class="row g-4 align-items-start">
          <section class="col-lg-5">
            <div class="card card-elevated bg-white text-body shadow-sm h-100">
              <div class="card-body p-4 p-lg-5 d-flex flex-column gap-4">
                <div class="d-flex flex-column gap-2">
                  <h2 id="ask-title" class="h3 fw-semibold mb-0">Ask a question</h2>
                  <p class="text-secondary mb-0">
                    No sign-in required. We share questions with SMEs daily and publish answers as soon as they arrive.
                  </p>
                </div>

                <form id="askForm" class="d-grid gap-3">
                  <div>
                    <label for="question" class="form-label fw-semibold">Question <span class="text-danger">*</span></label>
                    <textarea
                      id="question"
                      name="question"
                      class="form-control form-control-lg"
                      placeholder="What would you like to know?"
                      maxlength="400"
                      required
                      rows="4"
                    ></textarea>
                  </div>
                  <div>
                    <label for="details" class="form-label fw-semibold">Context for SMEs</label>
                    <textarea
                      id="details"
                      name="details"
                      class="form-control"
                      placeholder="Optional background that helps experts provide a thoughtful answer"
                      maxlength="800"
                      rows="4"
                    ></textarea>
                  </div>
                  <div>
                    <label for="tag" class="form-label fw-semibold">Topic tag</label>
                    <input
                      id="tag"
                      name="tag"
                      type="text"
                      class="form-control"
                      placeholder="e.g. Compliance, Product, HR"
                      maxlength="40"
                    />
                  </div>
                  <button type="submit" class="btn btn-primary btn-lg">Submit anonymously</button>
                  <p id="formStatus" role="status" class="text-secondary small mb-0"></p>
                </form>
              </div>
            </div>
          </section>

          <section class="col-lg-7">
            <div class="card card-elevated bg-white text-body shadow-sm h-100">
              <div class="card-body p-4 p-lg-5 d-flex flex-column gap-4">
                <div class="d-flex flex-column gap-3">
                  <div class="d-flex flex-wrap gap-3 justify-content-between align-items-center">
                    <h2 class="h3 fw-semibold mb-0">Questions from the community</h2>
                    <span id="questionCount" class="badge rounded-pill text-bg-primary px-3 py-2"></span>
                  </div>
                  <div class="row g-3 align-items-center">
                    <div class="col-12 col-lg">
                      <label for="search" class="form-label visually-hidden">Search questions</label>
                      <input
                        id="search"
                        type="search"
                        class="form-control"
                        placeholder="Search questions"
                        aria-label="Search questions"
                      />
                    </div>
                    <div class="col-12 col-lg-auto">
                      <div class="btn-group" role="group" aria-label="Filter questions">
                        <input type="radio" class="btn-check" name="filter" value="all" id="filter-all" checked />
                        <label class="btn btn-outline-primary filter-toggle active" for="filter-all">All</label>
                        <input type="radio" class="btn-check" name="filter" value="unanswered" id="filter-unanswered" />
                        <label class="btn btn-outline-primary filter-toggle" for="filter-unanswered">Awaiting answer</label>
                        <input type="radio" class="btn-check" name="filter" value="answered" id="filter-answered" />
                        <label class="btn btn-outline-primary filter-toggle" for="filter-answered">Answered</label>
                      </div>
                    </div>
                  </div>
                </div>

                <div id="questionList" class="question-list d-flex flex-column gap-3" aria-live="polite"></div>
              </div>
            </div>
          </section>
        </div>
      </div>
    </main>

    <template id="questionTemplate">
      <article class="question-item p-4 d-grid gap-3">
        <header class="d-grid gap-2">
          <div class="d-flex flex-wrap gap-2 align-items-center small text-secondary">
            <span class="badge rounded-pill badge-soft-primary fw-semibold" data-tag></span>
            <span class="d-inline-flex align-items-center gap-1">
              <span class="visually-hidden">Status:</span>
              <span data-status></span>
            </span>
            <span class="d-inline-flex align-items-center gap-1">
              <span class="visually-hidden">Asked:</span>
              <span data-timestamp></span>
            </span>
          </div>
          <h3 class="h5 fw-semibold mb-0" data-question></h3>
        </header>
        <p class="mb-0 text-secondary" data-details></p>
        <div class="ps-3 border-start border-4 border-primary-subtle" data-answer></div>
        <footer class="d-flex flex-wrap gap-2 align-items-center">
          <button type="button" class="btn btn-outline-primary btn-sm" data-upvote>
            <span aria-hidden="true">⬆️</span>
            <span class="ms-1">Upvote</span>
          </button>
          <span class="small text-secondary" data-count></span>
          <div class="ms-auto">
            <button type="button" class="btn btn-outline-success btn-sm" data-answer-btn>
              Add answer
            </button>
          </div>
        </footer>
      </article>
    </template>

    <script>
      const form = document.getElementById('askForm');
      const statusEl = document.getElementById('formStatus');
      const listEl = document.getElementById('questionList');
      const template = document.getElementById('questionTemplate');
      const searchInput = document.getElementById('search');
      const filterInputs = document.querySelectorAll('input[name="filter"]');
      const filterLabels = document.querySelectorAll('.filter-toggle');
      const countEl = document.getElementById('questionCount');

      const STORAGE_KEY = 'dare-to-ask-questions-v1';
      const VOTE_KEY = 'dare-to-ask-votes';

      const sampleQuestions = [
        {
          id: crypto.randomUUID(),
          question: 'How does the new risk assessment framework affect day-to-day decision making?',
          details: 'I have seen the deck, but still unsure how to apply the tiers when signing off initiatives.',
          tag: 'Risk & Compliance',
          createdAt: Date.now() - 1000 * 60 * 60 * 4,
          votes: 12,
          answer:
            'Great question! The short version is that every initiative now starts with a self-assessment against the three-tier matrix. If an activity touches customer data or regulatory commitments it automatically escalates to Tier 2 for SME review. We are rolling out a lightweight checklist next Monday to make this easier.',
        },
        {
          id: crypto.randomUUID(),
          question: 'What support is available for managers preparing performance reviews this cycle?',
          details: 'We have several new team leads who are nervous about the new template.',
          tag: 'People',
          createdAt: Date.now() - 1000 * 60 * 60 * 24,
          votes: 7,
          answer: '',
        },
      ];

      const loadQuestions = () => {
        try {
          const saved = JSON.parse(localStorage.getItem(STORAGE_KEY));
          return Array.isArray(saved) ? saved : sampleQuestions;
        } catch (error) {
          console.error('Failed to read storage', error);
          return sampleQuestions;
        }
      };

      const saveQuestions = (items) => {
        localStorage.setItem(STORAGE_KEY, JSON.stringify(items));
      };

      const loadVotes = () => {
        try {
          const saved = JSON.parse(localStorage.getItem(VOTE_KEY));
          return saved && typeof saved === 'object' ? saved : {};
        } catch (error) {
          return {};
        }
      };

      const saveVotes = (votes) => {
        localStorage.setItem(VOTE_KEY, JSON.stringify(votes));
      };

      let questions = loadQuestions();
      let votes = loadVotes();
      let activeFilter = 'all';
      let searchTerm = '';

      const timeAgo = (timestamp) => {
        const delta = Math.max(0, Date.now() - timestamp);
        const minute = 60 * 1000;
        const hour = 60 * minute;
        const day = 24 * hour;
        if (delta < minute) return 'just now';
        if (delta < hour) {
          const mins = Math.round(delta / minute);
          return `${mins} minute${mins === 1 ? '' : 's'} ago`;
        }
        if (delta < day) {
          const hours = Math.round(delta / hour);
          return `${hours} hour${hours === 1 ? '' : 's'} ago`;
        }
        const days = Math.round(delta / day);
        return `${days} day${days === 1 ? '' : 's'} ago`;
      };

      const renderQuestions = () => {
        listEl.innerHTML = '';
        let filtered = questions;

        if (activeFilter === 'unanswered') {
          filtered = filtered.filter((q) => !q.answer);
        } else if (activeFilter === 'answered') {
          filtered = filtered.filter((q) => !!q.answer);
        }

        if (searchTerm) {
          const query = searchTerm.toLowerCase();
          filtered = filtered.filter(
            (q) =>
              q.question.toLowerCase().includes(query) ||
              (q.details && q.details.toLowerCase().includes(query)) ||
              (q.tag && q.tag.toLowerCase().includes(query))
          );
        }

        countEl.textContent = `${filtered.length} question${filtered.length === 1 ? '' : 's'}`;

        if (!filtered.length) {
          listEl.innerHTML = '<div class="text-center text-secondary py-5 border rounded-4">No questions yet. Be the first to ask something brave!</div>';
          return;
        }

        const frag = document.createDocumentFragment();
        filtered
          .slice()
          .sort((a, b) => b.votes - a.votes || b.createdAt - a.createdAt)
          .forEach((q) => {
            const instance = template.content.cloneNode(true);
            const tagEl = instance.querySelector('[data-tag]');
            const statusEl = instance.querySelector('[data-status]');
            const timestampEl = instance.querySelector('[data-timestamp]');
            const qEl = instance.querySelector('[data-question]');
            const detailsEl = instance.querySelector('[data-details]');
            const answerEl = instance.querySelector('[data-answer]');
            const upvoteBtn = instance.querySelector('[data-upvote]');
            const countEl = instance.querySelector('[data-count]');
            const answerBtn = instance.querySelector('[data-answer-btn]');

            tagEl.textContent = q.tag || 'General';
            statusEl.textContent = q.answer ? 'Answered' : 'Awaiting answer';
            timestampEl.textContent = timeAgo(q.createdAt);
            qEl.textContent = q.question;
            detailsEl.textContent = q.details || '';
            detailsEl.classList.toggle('d-none', !q.details);
            answerEl.textContent = q.answer;
            answerEl.classList.toggle('d-none', !q.answer);
            countEl.textContent = `${q.votes} upvote${q.votes === 1 ? '' : 's'}`;

            if (votes[q.id]) {
              upvoteBtn.classList.add('btn-voted');
              upvoteBtn.classList.remove('btn-outline-primary');
              upvoteBtn.innerHTML = '<span aria-hidden="true">⬆️</span><span class="ms-1">Upvoted</span>';
            }

            upvoteBtn.addEventListener('click', () => {
              if (votes[q.id]) return;
              q.votes += 1;
              votes[q.id] = true;
              saveVotes(votes);
              saveQuestions(questions);
              renderQuestions();
            });

            answerBtn.addEventListener('click', () => {
              const answer = prompt('Add an answer to share with everyone:');
              if (answer && answer.trim()) {
                q.answer = answer.trim();
                saveQuestions(questions);
                renderQuestions();
              }
            });

            frag.appendChild(instance);
          });

        listEl.appendChild(frag);
      };

      form.addEventListener('submit', (event) => {
        event.preventDefault();
        const data = new FormData(form);
        const question = (data.get('question') || '').trim();
        const details = (data.get('details') || '').trim();
        const tag = (data.get('tag') || '').trim();

        if (!question) {
          statusEl.textContent = 'Please enter a question before submitting.';
          return;
        }

        const newQuestion = {
          id: crypto.randomUUID(),
          question,
          details,
          tag,
          createdAt: Date.now(),
          votes: 0,
          answer: '',
        };

        questions.unshift(newQuestion);
        saveQuestions(questions);
        form.reset();
        statusEl.textContent = 'Thanks! Your question has been queued for our SMEs.';
        renderQuestions();
        setTimeout(() => (statusEl.textContent = ''), 4000);
      });

      searchInput.addEventListener('input', (event) => {
        searchTerm = event.target.value;
        renderQuestions();
      });

      filterInputs.forEach((input) => {
        input.addEventListener('change', () => {
          activeFilter = input.value;
          filterLabels.forEach((label) => label.classList.remove('active'));
          const label = document.querySelector(`label[for="${input.id}"]`);
          if (label) {
            label.classList.add('active');
          }
          renderQuestions();
        });
      });

      renderQuestions();
    </script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
  </body>
</html>
